{
    "title": "Amazon EC2 Container Service",
    "description": "Amazon Elastic Container Service Amazon Elastic Container Service (Amazon ECS)\nis a highly scalable, fast, container management service that makes it easy to\nrun, stop, and manage Docker containers on a cluster. You can host your cluster\non a serverless infrastructure that is managed by Amazon ECS by launching your\nservices or tasks using the Fargate launch type. For more control, you can host\nyour tasks on a cluster of Amazon Elastic Compute Cloud (Amazon EC2) instances\nthat you manage by using the EC2 launch type. For more information about launch\ntypes, see Amazon ECS Launch Types\n[http://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html].\n\nAmazon ECS lets you launch and stop container-based applications with simple API\ncalls, allows you to get the state of your cluster from a centralized service,\nand gives you access to many familiar Amazon EC2 features.\n\nYou can use Amazon ECS to schedule the placement of containers across your\ncluster based on your resource needs, isolation policies, and availability\nrequirements. Amazon ECS eliminates the need for you to operate your own cluster\nmanagement and configuration management systems or worry about scaling your\nmanagement infrastructure.",
    "docsUrl": "https://docs.aws.amazon.com/ecs/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/ecs/2014-11-13/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://ecs.amazonaws.com/",
                    "http://ecs.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "CreateCluster": {
            "main": "./lib/actions/CreateCluster.js",
            "title": "CreateCluster",
            "description": "Creates a new Amazon ECS cluster. By default, your account receives a default \ncluster when you launch your first container instance. However, you can create\nyour own cluster with a unique name with the CreateCluster action.\n\nWhen you call the CreateCluster API operation, Amazon ECS attempts to create the\nservice-linked role for your account so that required resources in other AWS\nservices can be managed on your behalf. However, if the IAM user that makes the\ncall does not have permissions to create the service-linked role, it is not\ncreated. For more information, see Using Service-Linked Roles for Amazon ECS\n[http://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html] \nin the Amazon Elastic Container Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateCluster.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateService": {
            "main": "./lib/actions/CreateService.js",
            "title": "CreateService",
            "description": "Runs and maintains a desired number of tasks from a specified task definition.\nIf the number of tasks running in a service drops below desiredCount, Amazon ECS\nspawns another copy of the task in the specified cluster. To update an existing\nservice, see UpdateService.\n\nIn addition to maintaining the desired count of tasks in your service, you can\noptionally run your service behind a load balancer. The load balancer\ndistributes traffic across the tasks that are associated with the service. For\nmore information, see Service Load Balancing\n[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html] \nin the Amazon Elastic Container Service Developer Guide.\n\nYou can optionally specify a deployment configuration for your service. The\ndeployment is triggered by changing properties, such as the task definition or\nthe desired count of a service, with an UpdateService operation.\n\nIf a service is using the ECS deployment controller, the minimum healthy percent \nrepresents a lower limit on the number of tasks in a service that must remain in\nthe RUNNING state during a deployment, as a percentage of the desired number of\ntasks (rounded up to the nearest integer), and while any container instances are\nin the DRAINING state if the service contains tasks using the EC2 launch type.\nThis parameter enables you to deploy without using additional cluster capacity.\nFor example, if your service has a desired number of four tasks and a minimum\nhealthy percent of 50%, the scheduler may stop two existing tasks to free up\ncluster capacity before starting two new tasks. Tasks for services that do not \nuse a load balancer are considered healthy if they are in the RUNNING state;\ntasks for services that do use a load balancer are considered healthy if they\nare in the RUNNING state and they are reported as healthy by the load balancer.\nThe default value for minimum healthy percent is 100%.\n\nIf a service is using the ECS deployment controller, the maximum percent \nparameter represents an upper limit on the number of tasks in a service that are\nallowed in the RUNNING or PENDING state during a deployment, as a percentage of\nthe desired number of tasks (rounded down to the nearest integer), and while any\ncontainer instances are in the DRAINING state if the service contains tasks\nusing the EC2 launch type. This parameter enables you to define the deployment\nbatch size. For example, if your service has a desired number of four tasks and\na maximum percent value of 200%, the scheduler may start four new tasks before\nstopping the four older tasks (provided that the cluster resources required to\ndo this are available). The default value for maximum percent is 200%.\n\nIf a service is using the CODE_DEPLOY deployment controller and tasks that use\nthe EC2 launch type, the minimum healthy percent and maximum percent values are\nonly used to define the lower and upper limit on the number of the tasks in the\nservice that remain in the RUNNING state while the container instances are in\nthe DRAINING state. If the tasks in the service use the Fargate launch type, the\nminimum healthy percent and maximum percent values are not used, although they\nare currently visible when describing your service.\n\nTasks for services that do not use a load balancer are considered healthy if\nthey are in the RUNNING state. Tasks for services that do use a load balancer\nare considered healthy if they are in the RUNNING state and the container\ninstance they are hosted on is reported as healthy by the load balancer. The\ndefault value for a replica service for minimumHealthyPercent is 100%. The\ndefault value for a daemon service for minimumHealthyPercent is 0%.\n\nWhen the service scheduler launches new tasks, it determines task placement in\nyour cluster using the following logic:\n\n *  Determine which of the container instances in your cluster can support your\n   service's task definition (for example, they have the required CPU, memory,\n   ports, and container instance attributes).\n   \n   \n *  By default, the service scheduler attempts to balance tasks across\n   Availability Zones in this manner (although you can choose a different\n   placement strategy) with the placementStrategy parameter):\n   \n    *  Sort the valid container instances, giving priority to instances that\n      have the fewest number of running tasks for this service in their\n      respective Availability Zone. For example, if zone A has one running\n      service task and zones B and C each have zero, valid container instances\n      in either zone B or C are considered optimal for placement.\n      \n      \n    *  Place the new service task on a valid container instance in an optimal\n      Availability Zone (based on the previous steps), favoring container\n      instances with the fewest number of running tasks for this service.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateService.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteAccountSetting": {
            "main": "./lib/actions/DeleteAccountSetting.js",
            "title": "DeleteAccountSetting",
            "description": "Modifies the ARN and resource ID format of a resource for a specified IAM user, IAM role, or the root user for an account. You can specify whether the new ARN and resource ID format are disabled for new resources that are created.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteAccountSetting.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteAttributes": {
            "main": "./lib/actions/DeleteAttributes.js",
            "title": "DeleteAttributes",
            "description": "Deletes one or more custom attributes from an Amazon ECS resource.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteAttributes.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteCluster": {
            "main": "./lib/actions/DeleteCluster.js",
            "title": "DeleteCluster",
            "description": "Deletes the specified cluster. You must deregister all container instances from this cluster before you may delete it. You can list the container instances in a cluster with <a>ListContainerInstances</a> and deregister them with <a>DeregisterContainerInstance</a>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteCluster.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteService": {
            "main": "./lib/actions/DeleteService.js",
            "title": "DeleteService",
            "description": "Deletes a specified service within a cluster. You can delete a service if you\nhave no running tasks in it and the desired task count is zero. If the service\nis actively maintaining tasks, you cannot delete it, and you must update the\nservice to a desired task count of zero. For more information, see UpdateService\n.\n\nWhen you delete a service, if there are still running tasks that require\ncleanup, the service status moves from ACTIVE to DRAINING, and the service is no\nlonger visible in the console or in the ListServices API operation. After the\ntasks have stopped, then the service status moves from DRAINING to INACTIVE.\nServices in the DRAINING or INACTIVE status can still be viewed with the \nDescribeServices API operation. However, in the future, INACTIVE services may be\ncleaned up and purged from Amazon ECS record keeping, and DescribeServices calls\non those services return a ServiceNotFoundException error.\n\nIf you attempt to create a new service with the same name as an existing service\nin either ACTIVE or DRAINING status, you receive an error.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteService.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeregisterContainerInstance": {
            "main": "./lib/actions/DeregisterContainerInstance.js",
            "title": "DeregisterContainerInstance",
            "description": "Deregisters an Amazon ECS container instance from the specified cluster. This\ninstance is no longer available to run tasks.\n\nIf you intend to use the container instance for some other purpose after\nderegistration, you should stop all of the tasks running on the container\ninstance before deregistration. That prevents any orphaned tasks from consuming\nresources.\n\nDeregistering a container instance removes the instance from a cluster, but it\ndoes not terminate the EC2 instance. If you are finished using the instance, be\nsure to terminate it in the Amazon EC2 console to stop billing.\n\nIf you terminate a running container instance, Amazon ECS automatically\nderegisters the instance from your cluster (stopped container instances or\ninstances with disconnected agents are not automatically deregistered when\nterminated).",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeregisterContainerInstance.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeregisterTaskDefinition": {
            "main": "./lib/actions/DeregisterTaskDefinition.js",
            "title": "DeregisterTaskDefinition",
            "description": "Deregisters the specified task definition by family and revision. Upon\nderegistration, the task definition is marked as INACTIVE. Existing tasks and\nservices that reference an INACTIVE task definition continue to run without\ndisruption. Existing services that reference an INACTIVE task definition can\nstill scale up or down by modifying the service's desired count.\n\nYou cannot use an INACTIVE task definition to run new tasks or create new\nservices, and you cannot update an existing service to reference an INACTIVE \ntask definition. However, there may be up to a 10-minute window following\nderegistration where these restrictions have not yet taken effect.\n\nAt this time, INACTIVE task definitions remain discoverable in your account\nindefinitely. However, this behavior is subject to change in the future, so you\nshould not rely on INACTIVE task definitions persisting beyond the lifecycle of\nany associated tasks and services.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeregisterTaskDefinition.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeClusters": {
            "main": "./lib/actions/DescribeClusters.js",
            "title": "DescribeClusters",
            "description": "Describes one or more of your clusters.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeClusters.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeContainerInstances": {
            "main": "./lib/actions/DescribeContainerInstances.js",
            "title": "DescribeContainerInstances",
            "description": "Describes Amazon Elastic Container Service container instances. Returns metadata about registered and remaining resources on each container instance requested.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeContainerInstances.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeServices": {
            "main": "./lib/actions/DescribeServices.js",
            "title": "DescribeServices",
            "description": "Describes the specified services running in your cluster.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeServices.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeTaskDefinition": {
            "main": "./lib/actions/DescribeTaskDefinition.js",
            "title": "DescribeTaskDefinition",
            "description": "Describes a task definition. You can specify a family and revision to find\ninformation about a specific task definition, or you can simply specify the\nfamily to find the latest ACTIVE revision in that family.\n\nYou can only describe INACTIVE task definitions while an active task or service\nreferences them.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeTaskDefinition.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeTasks": {
            "main": "./lib/actions/DescribeTasks.js",
            "title": "DescribeTasks",
            "description": "Describes a specified task or tasks.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeTasks.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DiscoverPollEndpoint": {
            "main": "./lib/actions/DiscoverPollEndpoint.js",
            "title": "DiscoverPollEndpoint",
            "description": " This action is only used by the Amazon ECS agent, and it is not intended for\nuse outside of the agent.\n\nReturns an endpoint for the Amazon ECS agent to poll for updates.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DiscoverPollEndpoint.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListAccountSettings": {
            "main": "./lib/actions/ListAccountSettings.js",
            "title": "ListAccountSettings",
            "description": "Lists the account settings for an Amazon ECS resource for a specified principal.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListAccountSettings.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListAttributes": {
            "main": "./lib/actions/ListAttributes.js",
            "title": "ListAttributes",
            "description": "Lists the attributes for Amazon ECS resources within a specified target type and cluster. When you specify a target type and cluster, <code>ListAttributes</code> returns a list of attribute objects, one for each attribute on each resource. You can filter the list of results to a single attribute name to only return results that have that name. You can also filter the results by attribute name and value, for example, to see which container instances in a cluster are running a Linux AMI (<code>ecs.os-type=linux</code>). ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListAttributes.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListClusters": {
            "main": "./lib/actions/ListClusters.js",
            "title": "ListClusters",
            "description": "Returns a list of existing clusters.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListClusters.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListContainerInstances": {
            "main": "./lib/actions/ListContainerInstances.js",
            "title": "ListContainerInstances",
            "description": "Returns a list of container instances in a specified cluster. You can filter the results of a <code>ListContainerInstances</code> operation with cluster query language statements inside the <code>filter</code> parameter. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html\">Cluster Query Language</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListContainerInstances.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListServices": {
            "main": "./lib/actions/ListServices.js",
            "title": "ListServices",
            "description": "Lists the services that are running in a specified cluster.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListServices.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListTagsForResource": {
            "main": "./lib/actions/ListTagsForResource.js",
            "title": "ListTagsForResource",
            "description": "List the tags for an Amazon ECS resource.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListTagsForResource.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListTaskDefinitionFamilies": {
            "main": "./lib/actions/ListTaskDefinitionFamilies.js",
            "title": "ListTaskDefinitionFamilies",
            "description": "Returns a list of task definition families that are registered to your account\n(which may include task definition families that no longer have any ACTIVE task\ndefinition revisions).\n\nYou can filter out task definition families that do not contain any ACTIVE task\ndefinition revisions by setting the status parameter to ACTIVE. You can also\nfilter the results with the familyPrefix parameter.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListTaskDefinitionFamilies.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListTaskDefinitions": {
            "main": "./lib/actions/ListTaskDefinitions.js",
            "title": "ListTaskDefinitions",
            "description": "Returns a list of task definitions that are registered to your account. You can filter the results by family name with the <code>familyPrefix</code> parameter or by status with the <code>status</code> parameter.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListTaskDefinitions.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListTasks": {
            "main": "./lib/actions/ListTasks.js",
            "title": "ListTasks",
            "description": "Returns a list of tasks for a specified cluster. You can filter the results by\nfamily name, by a particular container instance, or by the desired status of the\ntask with the family, containerInstance, and desiredStatus parameters.\n\nRecently stopped tasks might appear in the returned results. Currently, stopped\ntasks appear in the returned results for at least one hour.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListTasks.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutAccountSetting": {
            "main": "./lib/actions/PutAccountSetting.js",
            "title": "PutAccountSetting",
            "description": "Modifies the ARN and resource ID format of a resource type for a specified IAM user, IAM role, or the root user for an account. If the account setting for the root user is changed, it sets the default setting for all of the IAM users and roles for which no individual account setting has been set. The opt-in and opt-out account setting can be set for each Amazon ECS resource separately. The ARN and resource ID format of a resource will be defined by the opt-in status of the IAM user or role that created the resource. Enabling this setting is required to use new Amazon ECS features such as resource tagging. For more information, see <a href=\"http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-resource-ids.html\">Amazon Resource Names (ARNs) and IDs</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutAccountSetting.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutAccountSettingDefault": {
            "main": "./lib/actions/PutAccountSettingDefault.js",
            "title": "PutAccountSettingDefault",
            "description": "Modifies the ARN and resource ID format of a resource type for all IAM users on an account for which no individual account setting has been set. Enabling this setting is required to use new Amazon ECS features such as resource tagging.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutAccountSettingDefault.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutAttributes": {
            "main": "./lib/actions/PutAttributes.js",
            "title": "PutAttributes",
            "description": "Create or update an attribute on an Amazon ECS resource. If the attribute does not exist, it is created. If the attribute exists, its value is replaced with the specified value. To delete an attribute, use <a>DeleteAttributes</a>. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes\">Attributes</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutAttributes.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RegisterContainerInstance": {
            "main": "./lib/actions/RegisterContainerInstance.js",
            "title": "RegisterContainerInstance",
            "description": " This action is only used by the Amazon ECS agent, and it is not intended for\nuse outside of the agent.\n\nRegisters an EC2 instance into the specified cluster. This instance becomes\navailable to place containers on.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RegisterContainerInstance.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RegisterTaskDefinition": {
            "main": "./lib/actions/RegisterTaskDefinition.js",
            "title": "RegisterTaskDefinition",
            "description": "Registers a new task definition from the supplied family and \ncontainerDefinitions. Optionally, you can add data volumes to your containers\nwith the volumes parameter. For more information about task definition\nparameters and defaults, see Amazon ECS Task Definitions\n[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html] \nin the Amazon Elastic Container Service Developer Guide.\n\nYou can specify an IAM role for your task with the taskRoleArn parameter. When\nyou specify an IAM role for a task, its containers can then use the latest\nversions of the AWS CLI or SDKs to make API requests to the AWS services that\nare specified in the IAM policy associated with the role. For more information,\nsee IAM Roles for Tasks\n[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html] \nin the Amazon Elastic Container Service Developer Guide.\n\nYou can specify a Docker networking mode for the containers in your task\ndefinition with the networkMode parameter. The available network modes\ncorrespond to those described in Network settings\n[https://docs.docker.com/engine/reference/run/#/network-settings] in the Docker\nrun reference. If you specify the awsvpc network mode, the task is allocated an\nelastic network interface, and you must specify a NetworkConfiguration when you\ncreate a service or run a task with the task definition. For more information,\nsee Task Networking\n[http://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html] \nin the Amazon Elastic Container Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RegisterTaskDefinition.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RunTask": {
            "main": "./lib/actions/RunTask.js",
            "title": "RunTask",
            "description": "Starts a new task using the specified task definition.\n\nYou can allow Amazon ECS to place tasks for you, or you can customize how Amazon\nECS places tasks using placement constraints and placement strategies. For more\ninformation, see Scheduling Tasks\n[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html] \nin the Amazon Elastic Container Service Developer Guide.\n\nAlternatively, you can use StartTask to use your own scheduler or place tasks\nmanually on specific container instances.\n\nThe Amazon ECS API follows an eventual consistency model, due to the distributed\nnature of the system supporting the API. This means that the result of an API\ncommand you run that affects your Amazon ECS resources might not be immediately\nvisible to all subsequent commands you run. Keep this in mind when you carry out\nan API command that immediately follows a previous API command.\n\nTo manage eventual consistency, you can do the following:\n\n *  Confirm the state of the resource before you run a command to modify it. Run\n   the DescribeTasks command using an exponential backoff algorithm to ensure\n   that you allow enough time for the previous command to propagate through the\n   system. To do this, run the DescribeTasks command repeatedly, starting with a\n   couple of seconds of wait time and increasing gradually up to five minutes of\n   wait time.\n   \n   \n *  Add wait time between subsequent commands, even if the DescribeTasks command\n   returns an accurate response. Apply an exponential backoff algorithm starting\n   with a couple of seconds of wait time, and increase gradually up to about\n   five minutes of wait time.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RunTask.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "StartTask": {
            "main": "./lib/actions/StartTask.js",
            "title": "StartTask",
            "description": "Starts a new task from the specified task definition on the specified container\ninstance or instances.\n\nAlternatively, you can use RunTask to place tasks for you. For more information,\nsee Scheduling Tasks\n[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html] \nin the Amazon Elastic Container Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/StartTask.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "StopTask": {
            "main": "./lib/actions/StopTask.js",
            "title": "StopTask",
            "description": "Stops a running task. Any tags associated with the task will be deleted.\n\nWhen StopTask is called on a task, the equivalent of docker stop is issued to\nthe containers running in the task. This results in a SIGTERM value and a\ndefault 30-second timeout, after which the SIGKILL value is sent and the\ncontainers are forcibly stopped. If the container handles the SIGTERM value\ngracefully and exits within 30 seconds from receiving it, no SIGKILL value is\nsent.\n\nThe default 30-second timeout can be configured on the Amazon ECS container\nagent with the ECS_CONTAINER_STOP_TIMEOUT variable. For more information, see \nAmazon ECS Container Agent Configuration\n[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html] \nin the Amazon Elastic Container Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/StopTask.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "SubmitContainerStateChange": {
            "main": "./lib/actions/SubmitContainerStateChange.js",
            "title": "SubmitContainerStateChange",
            "description": " This action is only used by the Amazon ECS agent, and it is not intended for\nuse outside of the agent.\n\nSent to acknowledge that a container changed states.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/SubmitContainerStateChange.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "SubmitTaskStateChange": {
            "main": "./lib/actions/SubmitTaskStateChange.js",
            "title": "SubmitTaskStateChange",
            "description": " This action is only used by the Amazon ECS agent, and it is not intended for\nuse outside of the agent.\n\nSent to acknowledge that a task changed states.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/SubmitTaskStateChange.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "TagResource": {
            "main": "./lib/actions/TagResource.js",
            "title": "TagResource",
            "description": "Associates the specified tags to a resource with the specified <code>resourceArn</code>. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are deleted as well.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TagResource.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UntagResource": {
            "main": "./lib/actions/UntagResource.js",
            "title": "UntagResource",
            "description": "Deletes specified tags from a resource.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UntagResource.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateContainerAgent": {
            "main": "./lib/actions/UpdateContainerAgent.js",
            "title": "UpdateContainerAgent",
            "description": "Updates the Amazon ECS container agent on a specified container instance.\nUpdating the Amazon ECS container agent does not interrupt running tasks or\nservices on the container instance. The process for updating the agent differs\ndepending on whether your container instance was launched with the Amazon\nECS-optimized AMI or another operating system.\n\n UpdateContainerAgent requires the Amazon ECS-optimized AMI or Amazon Linux with\nthe ecs-init service installed and running. For help updating the Amazon ECS\ncontainer agent on other operating systems, see Manually Updating the Amazon ECS\nContainer Agent\n[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html#manually_update_agent] \nin the Amazon Elastic Container Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateContainerAgent.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateContainerInstancesState": {
            "main": "./lib/actions/UpdateContainerInstancesState.js",
            "title": "UpdateContainerInstancesState",
            "description": "Modifies the status of an Amazon ECS container instance.\n\nYou can change the status of a container instance to DRAINING to manually remove\nan instance from a cluster, for example to perform system updates, update the\nDocker daemon, or scale down the cluster size. \n\nWhen you set a container instance to DRAINING, Amazon ECS prevents new tasks\nfrom being scheduled for placement on the container instance and replacement\nservice tasks are started on other container instances in the cluster if the\nresources are available. Service tasks on the container instance that are in the \nPENDING state are stopped immediately.\n\nService tasks on the container instance that are in the RUNNING state are\nstopped and replaced according to the service's deployment configuration\nparameters, minimumHealthyPercent and maximumPercent. You can change the\ndeployment configuration of your service using UpdateService.\n\n *  If minimumHealthyPercent is below 100%, the scheduler can ignore desiredCount \n   temporarily during task replacement. For example, desiredCount is four tasks,\n   a minimum of 50% allows the scheduler to stop two existing tasks before\n   starting two new tasks. If the minimum is 100%, the service scheduler can't\n   remove existing tasks until the replacement tasks are considered healthy.\n   Tasks for services that do not use a load balancer are considered healthy if\n   they are in the RUNNING state. Tasks for services that use a load balancer\n   are considered healthy if they are in the RUNNING state and the container\n   instance they are hosted on is reported as healthy by the load balancer.\n   \n   \n *  The maximumPercent parameter represents an upper limit on the number of\n   running tasks during task replacement, which enables you to define the\n   replacement batch size. For example, if desiredCount is four tasks, a maximum\n   of 200% starts four new tasks before stopping the four tasks to be drained,\n   provided that the cluster resources required to do this are available. If the\n   maximum is 100%, then replacement tasks can't start until the draining tasks\n   have stopped.\n   \n   \n\nAny PENDING or RUNNING tasks that do not belong to a service are not affected.\nYou must wait for them to finish or stop them manually.\n\nA container instance has completed draining when it has no more RUNNING tasks.\nYou can verify this using ListTasks.\n\nWhen you set a container instance to ACTIVE, the Amazon ECS scheduler can begin\nscheduling tasks on the instance again.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateContainerInstancesState.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateService": {
            "main": "./lib/actions/UpdateService.js",
            "title": "UpdateService",
            "description": "Modifies the parameters of a service.\n\nFor services using the rolling update (ECS) deployment controller, the desired\ncount, deployment configuration, network configuration, or task definition used\ncan be updated.\n\nFor services using the blue/green (CODE_DEPLOY) deployment controller, only the\ndesired count, deployment configuration, and health check grace period can be\nupdated using this API. If the network configuration, platform version, or task\ndefinition need to be updated, a new AWS CodeDeploy deployment should be\ncreated. For more information, see CreateDeployment\n[https://docs.aws.amazon.com/codedeploy/latest/APIReference/API_CreateDeployment.html] \nin the AWS CodeDeploy API Reference.\n\nYou can add to or subtract from the number of instantiations of a task\ndefinition in a service by specifying the cluster that the service is running in\nand a new desiredCount parameter.\n\nIf you have updated the Docker image of your application, you can create a new\ntask definition with that image and deploy it to your service. The service\nscheduler uses the minimum healthy percent and maximum percent parameters (in\nthe service's deployment configuration) to determine the deployment strategy.\n\nIf your updated Docker image uses the same tag as what is in the existing task\ndefinition for your service (for example, my_image:latest), you do not need to\ncreate a new revision of your task definition. You can update the service using\nthe forceNewDeployment option. The new tasks launched by the deployment pull the\ncurrent image/tag combination from your repository when they start.\n\nYou can also update the deployment configuration of a service. When a deployment\nis triggered by updating the task definition of a service, the service scheduler\nuses the deployment configuration parameters, minimumHealthyPercent and \nmaximumPercent, to determine the deployment strategy.\n\n *  If minimumHealthyPercent is below 100%, the scheduler can ignore desiredCount \n   temporarily during a deployment. For example, if desiredCount is four tasks,\n   a minimum of 50% allows the scheduler to stop two existing tasks before\n   starting two new tasks. Tasks for services that do not use a load balancer\n   are considered healthy if they are in the RUNNING state. Tasks for services\n   that use a load balancer are considered healthy if they are in the RUNNING \n   state and the container instance they are hosted on is reported as healthy by\n   the load balancer.\n   \n   \n *  The maximumPercent parameter represents an upper limit on the number of\n   running tasks during a deployment, which enables you to define the deployment\n   batch size. For example, if desiredCount is four tasks, a maximum of 200%\n   starts four new tasks before stopping the four older tasks (provided that the\n   cluster resources required to do this are available).\n   \n   \n\nWhen UpdateService stops a task during a deployment, the equivalent of docker\nstop is issued to the containers running in the task. This results in a SIGTERM \nand a 30-second timeout, after which SIGKILL is sent and the containers are\nforcibly stopped. If the container handles the SIGTERM gracefully and exits\nwithin 30 seconds from receiving it, no SIGKILL is sent.\n\nWhen the service scheduler launches new tasks, it determines task placement in\nyour cluster with the following logic:\n\n *  Determine which of the container instances in your cluster can support your\n   service's task definition (for example, they have the required CPU, memory,\n   ports, and container instance attributes).\n   \n   \n *  By default, the service scheduler attempts to balance tasks across\n   Availability Zones in this manner (although you can choose a different\n   placement strategy):\n   \n    *  Sort the valid container instances by the fewest number of running tasks\n      for this service in the same Availability Zone as the instance. For\n      example, if zone A has one running service task and zones B and C each\n      have zero, valid container instances in either zone B or C are considered\n      optimal for placement.\n      \n      \n    *  Place the new service task on a valid container instance in an optimal\n      Availability Zone (based on the previous steps), favoring container\n      instances with the fewest number of running tasks for this service.\n      \n      \n   \n   \n\nWhen the service scheduler stops running tasks, it attempts to maintain balance\nacross the Availability Zones in your cluster using the following logic: \n\n *  Sort the container instances by the largest number of running tasks for this\n   service in the same Availability Zone as the instance. For example, if zone A\n   has one running service task and zones B and C each have two, container\n   instances in either zone B or C are considered optimal for termination.\n   \n   \n *  Stop the task on a container instance in an optimal Availability Zone (based\n   on the previous steps), favoring container instances with the largest number\n   of running tasks for this service.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateService.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}